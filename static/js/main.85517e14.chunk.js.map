{"version":3,"sources":["screen1/drag-drop.js","screen1/lyrics.js","screen1/screen1.js","screen2/screen2.js","App.js","serviceWorker.js","index.js"],"names":["MyDropzone","props","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onerror","console","log","onload","e","present","document","getElementById","remove","url","target","result","sound","createElement","link","id","controls","src","type","appendChild","event","Event","window","dispatchEvent","process","readAsDataURL","useDropzone","getRootProps","getInputProps","files","isDragActive","map","key","path","size","className","Lyrics","useState","value","state","setState","placeholder","onChange","lyrics","replace","Screen1","screen","dragDrop","disable","setVisibility","sourceEnable","Boolean","trim","data","disabled","onClick","count","change","Screen2","formatLyrics","text","split","index","order","start","end","startSrt","endSrt","convertTime","duration","Date","toISOString","substr","convertSecToTime","sec","undefined","convertTimeToSec","timeString","arr","classList","classes","filter","item","join","currentIndex","lines","setLyricsState","range","setRange","errorMessage","handleInput","name","newStateLines","handleUserKeyPress","audio","keyCode","stopPropagation","preventDefault","currentTime","alert","findIndex","x","prevLineStart","length","nextLineStart","useEffect","pause","addEventListener","blur","removeEventListener","line","Number","play","toFixed","min","max","step","playbackRate","changed","outputString","filename","element","setAttribute","encodeURIComponent","style","display","body","click","removeChild","save","App","screenNo","updateLyrics","setScreen","no","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85517e14.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\n\r\n\r\nexport default function MyDropzone(props) {\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    acceptedFiles.forEach((file) => {\r\n      const reader = new FileReader()\r\n      reader.onerror = () => console.log('fail on file reading')\r\n      reader.onload = (e) => {\r\n        let present = document.getElementById(\"audio-player\");\r\n        if(present) present.remove() \r\n        const url = e.target.result;\r\n        const sound = document.createElement(\"audio\");\r\n        const link = document.createElement(\"source\");\r\n        sound.id = \"audio-player\";\r\n        sound.controls = \"controls\";\r\n        link.src = url;\r\n        sound.type = \"audio/mpeg\";\r\n        sound.appendChild(link);\r\n        document.getElementById(\"song\").appendChild(sound);\r\n        const event = new Event('songLoaded');\r\n        window.dispatchEvent(event)\r\n        props.process(\"song\",true)\r\n      }\r\n      reader.readAsDataURL(file)\r\n    })\r\n    \r\n  }, [])\r\n  const {acceptedFiles, getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  const files = acceptedFiles.map(file => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <label>UPLOAD MP3 FILE</label>\r\n      <div {...getRootProps({className: 'dropzone'})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      </div>\r\n      <aside>\r\n        <h4>Files</h4>\r\n        <ul>{files}</ul>\r\n      </aside>\r\n    </div>\r\n  );    \r\n\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function Lyrics(props) {\r\n  const [state, setState] = useState({value:\"\"})\r\n  const formatText = (text) => text.replace(/[\\r\\n]{2,}/g, \"\\n\")\r\n\r\n  const handleChange = (event) => {\r\n    let lyrics = event.target.value\r\n    setState({value: lyrics})\r\n    props.process(\"lyrics\", formatText(lyrics))\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <label>ENTER YOUR LYRICS</label>\r\n      <div className=\"lyricsArea\">\r\n        <textarea placeholder=\"Paste your lyrics here\" value={state.value} onChange={handleChange}></textarea>\r\n      </div>     \r\n    </div>   \r\n  );\r\n}","import React, {useState, useCallback} from \"react\"\r\nimport Dragdrop from './drag-drop'\r\nimport Lyrics from './lyrics'\r\n\r\nexport default function Screen1(props){\r\n\r\n  const [screen, setScreen] = useState(props.screen);\r\n  const [disable, setVisibility] = useState({dragDrop: true, lyrics: true})\r\n  \r\n  const trigger = (count) => {\r\n    props.change(count)\r\n  }\r\n\r\n  const sourceEnable = (type, value) => {\r\n    if(type === \"song\") {\r\n      setVisibility((disable) => ({...disable,dragDrop: !value}))    \r\n    } else if(type === \"lyrics\") {\r\n      setVisibility((disable) => ({...disable,lyrics: !Boolean(value && value.trim !== \"\")}))\r\n      props.data(value.trim())  \r\n    }\r\n  }\r\n\r\n  return(\r\n    <section className={'screen screen1 active'+props.screen}>\r\n      <header>Let's start syncing your lyrics</header>\r\n      <Dragdrop process={sourceEnable}/>\r\n      <Lyrics process={sourceEnable}/> \r\n      <footer>\r\n        <button disabled={disable.lyrics || disable.dragDrop} onClick={(e) => trigger(2)}>LET'S START</button>\r\n      </footer>    \r\n    </section>\r\n  )  \r\n}","import React, {useState, useEffect, useCallback} from \"react\"\r\n\r\nexport default function Screen2(props){\r\n\r\n  const trigger = (count) => props.change(count)\r\n  const formatLyrics = (text) => text.split(\"\\n\").map((value, index) => ({ order: index+1, text:value, start:\"\", end:\"\", startSrt:\"\", endSrt:\"\"}))  \r\n  const convertTime = (duration) => new Date(duration * 1000).toISOString().substr(11,12).replace('.',',')\r\n  const convertSecToTime = (sec) => (sec && typeof sec !== undefined) ? new Date(sec * 1e3).toISOString().substr(11,8) : \"\" \r\n  const convertTimeToSec = timeString => {let arr = timeString.split(\":\");return (+arr[0])*3600 + (+arr[1])*60 + (+arr[2])} \r\n  const copyTime = (time) => \"\" + time \r\n  \r\n  function classList(...classes) {\r\n    return classes\r\n      .filter(item => !!item)\r\n      .join(' ');\r\n  }\r\n\r\n  const start = () => {\r\n    let audio = document.getElementById('audio-player')\r\n    audio.play()\r\n  }\r\n\r\n  const pause = () => {\r\n    let audio = document.getElementById('audio-player')\r\n    audio.pause()  \r\n  }\r\n\r\n  \r\n  const [lyrics, setLyricsState] = useState({currentIndex: 0, lines: formatLyrics(props.lyrics)})\r\n  const [range, setRange] = useState(1)\r\n    \r\n  let errorMessage = \"\"\r\n  let lineFinish = false\r\n\r\n  function save(filename, text) {\r\n    var element = document.createElement('a')\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))\r\n    element.setAttribute('download', filename)\r\n    element.style.display = 'none'\r\n    document.body.appendChild(element)\r\n    element.click()\r\n    document.body.removeChild(element)\r\n  }\r\n  const changeRange = e => {\r\n    e.target.blur()\r\n    let audio = document.getElementById('audio-player')\r\n    audio.playbackRate = e.target.value\r\n    setRange(e.target.value)\r\n  }\r\n\r\n  const copy = e => {\r\n    e.target.blur()\r\n    setLyricsState(state => { \r\n      let newLyrics = [...state.lines]\r\n      let changed = newLyrics.map((line,index, arr) => {\r\n        if(index !== arr.length-1) {\r\n          if(arr[index+1].start.trim() !== \"\") {\r\n            line.end = arr[index+1].start\r\n            line.endSrt = arr[index+1].startSrt\r\n          }\r\n        }\r\n        return line  \r\n      })\r\n      return {...state, lines: changed}\r\n    }) \r\n  }\r\n\r\n  const download = () => {\r\n    \r\n    // check if all the fields are true \r\n    // otherwise ask for manual entry \r\n\r\n    let emptyCells = lyrics.lines.filter((value, index) => value.start.trim() === \"\" || value.end.trim() === \"\")\r\n    if(emptyCells.length) {\r\n      alert('Please fill the empty cells')\r\n      return;\r\n    }\r\n\r\n    let outputString = \"0\\n00:00:00,000 --> 00:00:01,000\\nGenerated by: Lyrics Sync\"\r\n\r\n    lyrics.lines.forEach((line, index) => {\r\n      outputString += `\\n\\n${1+index}\\n${line.startSrt ? line.startSrt : line.start + ',000'} --> ${line.endSrt ? line.endSrt : line.end + ',000'}\\n${line.text}`\r\n    })\r\n\r\n    save(\"subtitle.srt\",outputString)\r\n  }\r\n\r\n  const handleInput = (e, index) => {\r\n    let value = e.target.value\r\n    let name = e.target.name\r\n    setLyricsState(state => {\r\n      let newStateLines = [...state.lines]\r\n      if(name == \"start\") {\r\n        newStateLines[index] = {...newStateLines[index], start: value}  \r\n      } else if(name == \"end\") {\r\n        newStateLines[index] = {...newStateLines[index], end: value}  \r\n      }\r\n      let newState = {...state, lines: newStateLines}            \r\n      return newState\r\n    })\r\n  }\r\n\r\n  const handleUserKeyPress = useCallback(e => {\r\n    let audio = document.getElementById('audio-player');\r\n    if(props.screen === 1) return false \r\n    if(e.keyCode == 32) { // space activates the current index, timer starts \r\n        \r\n      e.stopPropagation();\r\n      e.preventDefault();  \r\n      \r\n      if(audio && audio.currentTime == 0) {\r\n        errorMessage = \"Please start the record\"\r\n        alert('Please start the record')\r\n        return 0     \r\n      }   \r\n\r\n      setLyricsState(state => {\r\n        let newStateLines = [...state.lines]\r\n        let index = newStateLines.findIndex((x) => x.order == state.currentIndex + 1)\r\n\r\n        if(index<0) {\r\n          lineFinish = true;\r\n          return state\r\n        }\r\n        newStateLines[index] = {...newStateLines[index], start: convertSecToTime(audio.currentTime), startSrt: convertTime(audio.currentTime)}    \r\n        let newState = {...state, lines: newStateLines, currentIndex: state.currentIndex + 1}\r\n        return newState\r\n      })\r\n      \r\n    } else if (e.keyCode == 13) { // enter key code\r\n\r\n      if(audio && audio.currentTime == 0) {\r\n        errorMessage = \"Please start the record\"\r\n        alert('please start the record')\r\n        return 0     \r\n      } \r\n\r\n      setLyricsState(state => {\r\n        let newStateLines = [...state.lines]\r\n        let index = newStateLines.findIndex((x) => x.order == state.currentIndex)\r\n        newStateLines[index] = {...newStateLines[index], end: convertSecToTime(audio.currentTime), endSrt: convertTime(audio.currentTime)}   \r\n        let newState = {...state, lines: newStateLines}        \r\n        return newState\r\n      })       \r\n    } else if(e.keyCode == 37){  // left arrow key code\r\n      e.stopPropagation();\r\n      e.preventDefault();  \r\n      //set the current index to previous   \r\n      setLyricsState(state => { \r\n        if(state.currentIndex !== 1) {\r\n          // set the audio to previous line  \r\n          let prevLineStart = state.lines[state.currentIndex-2].start\r\n          if(prevLineStart) audio.currentTime = convertTimeToSec(prevLineStart) - 1 \r\n          return {...state, currentIndex: state.currentIndex - 1}\r\n        } else {\r\n          return {...state}\r\n        }\r\n      })  \r\n    } else if(e.keyCode == 39) {  // right arrow key code\r\n      \r\n      e.stopPropagation();\r\n      e.preventDefault();  \r\n\r\n      //set the current index to next \r\n      setLyricsState(state => { \r\n        if(state.currentIndex !== state.lines.length) {\r\n          // set the audio to next line \r\n          let nextLineStart = state.lines[state.currentIndex].start\r\n          if(nextLineStart) audio.currentTime = convertTimeToSec(nextLineStart) - 1 \r\n          return {...state, currentIndex: state.currentIndex + 1}\r\n        } else {\r\n          return {...state}\r\n        }\r\n      })   \r\n    } \r\n  }, [props.screen]);\r\n\r\n  useEffect(() => {\r\n\r\n    let screenNumber = props.screen;\r\n    let audio = document.getElementById('audio-player');\r\n    \r\n    if(audio) {\r\n      audio.pause();\r\n      audio.currentTime = 0;\r\n    }\r\n    \r\n    setLyricsState(state => ({...state, lines: formatLyrics(props.lyrics), currentIndex: 0}))\r\n\r\n    window.addEventListener('songLoaded', () => {\r\n      audio = document.getElementById('audio-player')\r\n      audio.addEventListener('play', () => {\r\n        audio.blur()\r\n      })\r\n      audio.addEventListener('pause', () => {\r\n        audio.blur()\r\n      })  \r\n    }, false) \r\n    \r\n    \r\n    window.addEventListener('keydown', handleUserKeyPress);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleUserKeyPress);\r\n    };\r\n    \r\n  },[props.screen,handleUserKeyPress]);\r\n\r\n\r\n\r\n  return(\r\n    <section className={'screen screen2 active' + props.screen}>\r\n      <header>Sync your lyrics</header>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"lyricsArea\">\r\n          <ul>\r\n            {\r\n              lyrics.lines.map((line, index) => {\r\n                return <li key={index} className={classList(lyrics.currentIndex == Number(index+1) && 'active', 'line-'+ Number(index+1), line.start && line.end && 'done')}> \r\n                  <i>{index+1}</i> \r\n                  <a>{line.text}</a>\r\n                  <input name=\"start\" value={line.start} onChange={(e) => handleInput(e,index)}></input>\r\n                  <input name=\"end\" value={line.end} onChange={(e) => handleInput(e,index)}></input> \r\n                </li>\r\n              })\r\n            }  \r\n          </ul>  \r\n        </div>     \r\n      </div> \r\n      <div className=\"container\">\r\n        <div>\r\n          <button onClick={start}>PLAY</button>\r\n          <button onClick={pause}>PAUSE</button>\r\n          <div id=\"song\"></div>\r\n        </div>\r\n        <div>\r\n          <div className=\"rangeContainer\">\r\n            <label>PLAYBACK RATE ({Number(range).toFixed(2)})</label> \r\n            <input id=\"pbr\" type=\"range\" min=\"0.25\" max=\"1.75\" step=\"0.25\" value={range} onChange={changeRange}/> \r\n          </div>\r\n        </div>\r\n        <div>\r\n          <button onClick={copy}>COPY STARTS TO ENDS</button>\r\n          <button onClick={(e) => trigger(1)}>HOMEPAGE</button>\r\n          <button onClick={download}>DOWNLOAD SRT</button>\r\n          <label>{errorMessage}</label>       \r\n        </div>\r\n      </div>\r\n    </section>\r\n  )  \r\n}","import React, { useState } from 'react';\nimport Screen1 from './screen1/screen1'\nimport Screen2 from './screen2/screen2'\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState({screenNo:1})\n  const [lyrics, updateLyrics] = useState(\"\")\n\n\n  const screenNo = state.screenNo;\n  const setScreen = (no) => setState((state) => ({...state, screenNo: no}))\n\n  const setData = (data) => {\n    updateLyrics(data)\n  }\n\n  return (\n    <div className=\"App\">\n      <Screen1 screen={screenNo} change={setScreen} data={setData}/>\n      <Screen2 lyrics={lyrics} screen={screenNo} change={setScreen}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}